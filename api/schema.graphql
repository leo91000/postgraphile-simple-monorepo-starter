"""Store of all building blocks UUIDs."""
type BuildingBlock implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!

  """
  A globally unique identifier of the building block. You should generate it
  manually, but if ommited, a value will be generated for you. DO NOT USE
  EXISTING UUID, IT MUST BE UNIQUE.
  """
  uuid: UUID!

  """Reads and enables pagination through a set of `PageBlock`."""
  pageBlocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PageBlock`."""
    orderBy: [PageBlocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageBlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageBlockFilter
  ): PageBlocksConnection!
}

"""
A condition to be used against `BuildingBlock` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BuildingBlockCondition {
  """Checks for equality with the object’s `uuid` field."""
  uuid: UUID
}

"""
A filter to be used against `BuildingBlock` object types. All fields are combined with a logical ‘and.’
"""
input BuildingBlockFilter {
  """Filter by the object’s `uuid` field."""
  uuid: UUIDFilter

  """Checks for all expressions in this list."""
  and: [BuildingBlockFilter!]

  """Checks for any expressions in this list."""
  or: [BuildingBlockFilter!]

  """Negates the expression."""
  not: BuildingBlockFilter
}

"""An input for mutations affecting `BuildingBlock`"""
input BuildingBlockInput {
  """
  A globally unique identifier of the building block. You should generate it
  manually, but if ommited, a value will be generated for you. DO NOT USE
  EXISTING UUID, IT MUST BE UNIQUE.
  """
  uuid: UUID
}

"""
Represents an update to a `BuildingBlock`. Fields that are set will be updated.
"""
input BuildingBlockPatch {
  """
  A globally unique identifier of the building block. You should generate it
  manually, but if ommited, a value will be generated for you. DO NOT USE
  EXISTING UUID, IT MUST BE UNIQUE.
  """
  uuid: UUID
}

"""A connection to a list of `BuildingBlock` values."""
type BuildingBlocksConnection {
  """A list of `BuildingBlock` objects."""
  nodes: [BuildingBlock!]!

  """
  A list of edges which contains the `BuildingBlock` and cursor to aid in pagination.
  """
  edges: [BuildingBlocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BuildingBlock` you could get from the connection."""
  totalCount: Int!
}

"""A `BuildingBlock` edge in the connection."""
type BuildingBlocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BuildingBlock` at the end of the edge."""
  node: BuildingBlock!
}

"""Methods to use when ordering `BuildingBlock`."""
enum BuildingBlocksOrderBy {
  NATURAL
  UUID_ASC
  UUID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `BuildingBlock` mutation."""
input CreateBuildingBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `BuildingBlock` to be created by this mutation."""
  buildingBlock: BuildingBlockInput!
}

"""The output of our create `BuildingBlock` mutation."""
type CreateBuildingBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BuildingBlock` that was created by this mutation."""
  buildingBlock: BuildingBlock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BuildingBlock`. May be used by Relay 1."""
  buildingBlockEdge(
    """The method to use when ordering `BuildingBlock`."""
    orderBy: [BuildingBlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildingBlocksEdge
}

"""All input for the create `PageBlock` mutation."""
input CreatePageBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `PageBlock` to be created by this mutation."""
  pageBlock: PageBlockInput!
}

"""The output of our create `PageBlock` mutation."""
type CreatePageBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PageBlock` that was created by this mutation."""
  pageBlock: PageBlock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Page` that is related to this `PageBlock`."""
  page: Page

  """Reads a single `BuildingBlock` that is related to this `PageBlock`."""
  buildingBlock: BuildingBlock

  """An edge for our `PageBlock`. May be used by Relay 1."""
  pageBlockEdge(
    """The method to use when ordering `PageBlock`."""
    orderBy: [PageBlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageBlocksEdge
}

"""All input for the create `Page` mutation."""
input CreatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Page` to be created by this mutation."""
  page: PageInput!
}

"""The output of our create `Page` mutation."""
type CreatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was created by this mutation."""
  page: Page

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""All input for the `deleteBuildingBlockByNodeId` mutation."""
input DeleteBuildingBlockByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BuildingBlock` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteBuildingBlock` mutation."""
input DeleteBuildingBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  A globally unique identifier of the building block. You should generate it
  manually, but if ommited, a value will be generated for you. DO NOT USE
  EXISTING UUID, IT MUST BE UNIQUE.
  """
  uuid: UUID!
}

"""The output of our delete `BuildingBlock` mutation."""
type DeleteBuildingBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BuildingBlock` that was deleted by this mutation."""
  buildingBlock: BuildingBlock
  deletedBuildingBlockNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BuildingBlock`. May be used by Relay 1."""
  buildingBlockEdge(
    """The method to use when ordering `BuildingBlock`."""
    orderBy: [BuildingBlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildingBlocksEdge
}

"""All input for the `deletePageBlockByNodeId` mutation."""
input DeletePageBlockByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PageBlock` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePageBlock` mutation."""
input DeletePageBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `PageBlock` mutation."""
type DeletePageBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PageBlock` that was deleted by this mutation."""
  pageBlock: PageBlock
  deletedPageBlockNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Page` that is related to this `PageBlock`."""
  page: Page

  """Reads a single `BuildingBlock` that is related to this `PageBlock`."""
  buildingBlock: BuildingBlock

  """An edge for our `PageBlock`. May be used by Relay 1."""
  pageBlockEdge(
    """The method to use when ordering `PageBlock`."""
    orderBy: [PageBlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageBlocksEdge
}

"""All input for the `deletePageByNodeId` mutation."""
input DeletePageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Page` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deletePageByUrl` mutation."""
input DeletePageByUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """Routing URL of the page."""
  url: String!
}

"""All input for the `deletePage` mutation."""
input DeletePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""The output of our delete `Page` mutation."""
type DeletePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was deleted by this mutation."""
  page: Page
  deletedPageNodeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Included in the specified list."""
  in: [Int!]

  """Not included in the specified list."""
  notIn: [Int!]

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `BuildingBlock`."""
  createBuildingBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateBuildingBlockInput!
  ): CreateBuildingBlockPayload

  """Creates a single `Page`."""
  createPage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageInput!
  ): CreatePagePayload

  """Creates a single `PageBlock`."""
  createPageBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePageBlockInput!
  ): CreatePageBlockPayload

  """
  Updates a single `BuildingBlock` using its globally unique id and a patch.
  """
  updateBuildingBlockByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBuildingBlockByNodeIdInput!
  ): UpdateBuildingBlockPayload

  """Updates a single `BuildingBlock` using a unique key and a patch."""
  updateBuildingBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateBuildingBlockInput!
  ): UpdateBuildingBlockPayload

  """Updates a single `Page` using its globally unique id and a patch."""
  updatePageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageByNodeIdInput!
  ): UpdatePagePayload

  """Updates a single `Page` using a unique key and a patch."""
  updatePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageInput!
  ): UpdatePagePayload

  """Updates a single `Page` using a unique key and a patch."""
  updatePageByUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageByUrlInput!
  ): UpdatePagePayload

  """Updates a single `PageBlock` using its globally unique id and a patch."""
  updatePageBlockByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageBlockByNodeIdInput!
  ): UpdatePageBlockPayload

  """Updates a single `PageBlock` using a unique key and a patch."""
  updatePageBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePageBlockInput!
  ): UpdatePageBlockPayload

  """Deletes a single `BuildingBlock` using its globally unique id."""
  deleteBuildingBlockByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBuildingBlockByNodeIdInput!
  ): DeleteBuildingBlockPayload

  """Deletes a single `BuildingBlock` using a unique key."""
  deleteBuildingBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteBuildingBlockInput!
  ): DeleteBuildingBlockPayload

  """Deletes a single `Page` using its globally unique id."""
  deletePageByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageByNodeIdInput!
  ): DeletePagePayload

  """Deletes a single `Page` using a unique key."""
  deletePage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageInput!
  ): DeletePagePayload

  """Deletes a single `Page` using a unique key."""
  deletePageByUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageByUrlInput!
  ): DeletePagePayload

  """Deletes a single `PageBlock` using its globally unique id."""
  deletePageBlockByNodeId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageBlockByNodeIdInput!
  ): DeletePageBlockPayload

  """Deletes a single `PageBlock` using a unique key."""
  deletePageBlock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePageBlockInput!
  ): DeletePageBlockPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

"""Represents a web page."""
type Page implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """Routing URL of the page."""
  url: String!

  """Reads and enables pagination through a set of `PageBlock`."""
  pageBlocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PageBlock`."""
    orderBy: [PageBlocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageBlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageBlockFilter
  ): PageBlocksConnection!
}

"""Represents a part of a page."""
type PageBlock implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!

  """The page the block belongs to."""
  pageId: Int!

  """The type of building block the block refers to."""
  buildingBlockId: UUID!

  """All stored data."""
  data: JSON!

  """Reads a single `Page` that is related to this `PageBlock`."""
  page: Page

  """Reads a single `BuildingBlock` that is related to this `PageBlock`."""
  buildingBlock: BuildingBlock
}

"""
A condition to be used against `PageBlock` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input PageBlockCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `pageId` field."""
  pageId: Int

  """Checks for equality with the object’s `buildingBlockId` field."""
  buildingBlockId: UUID
}

"""
A filter to be used against `PageBlock` object types. All fields are combined with a logical ‘and.’
"""
input PageBlockFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `pageId` field."""
  pageId: IntFilter

  """Filter by the object’s `buildingBlockId` field."""
  buildingBlockId: UUIDFilter

  """Checks for all expressions in this list."""
  and: [PageBlockFilter!]

  """Checks for any expressions in this list."""
  or: [PageBlockFilter!]

  """Negates the expression."""
  not: PageBlockFilter
}

"""An input for mutations affecting `PageBlock`"""
input PageBlockInput {
  """The page the block belongs to."""
  pageId: Int!

  """The type of building block the block refers to."""
  buildingBlockId: UUID!

  """All stored data."""
  data: JSON!
}

"""
Represents an update to a `PageBlock`. Fields that are set will be updated.
"""
input PageBlockPatch {
  """The page the block belongs to."""
  pageId: Int

  """The type of building block the block refers to."""
  buildingBlockId: UUID

  """All stored data."""
  data: JSON
}

"""A connection to a list of `PageBlock` values."""
type PageBlocksConnection {
  """A list of `PageBlock` objects."""
  nodes: [PageBlock!]!

  """
  A list of edges which contains the `PageBlock` and cursor to aid in pagination.
  """
  edges: [PageBlocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `PageBlock` you could get from the connection."""
  totalCount: Int!
}

"""A `PageBlock` edge in the connection."""
type PageBlocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `PageBlock` at the end of the edge."""
  node: PageBlock!
}

"""Methods to use when ordering `PageBlock`."""
enum PageBlocksOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PAGE_ID_ASC
  PAGE_ID_DESC
  BUILDING_BLOCK_ID_ASC
  BUILDING_BLOCK_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Page` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PageCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""
A filter to be used against `Page` object types. All fields are combined with a logical ‘and.’
"""
input PageFilter {
  """Filter by the object’s `id` field."""
  id: IntFilter

  """Filter by the object’s `url` field."""
  url: StringFilter

  """Checks for all expressions in this list."""
  and: [PageFilter!]

  """Checks for any expressions in this list."""
  or: [PageFilter!]

  """Negates the expression."""
  not: PageFilter
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""An input for mutations affecting `Page`"""
input PageInput {
  """Routing URL of the page."""
  url: String!
}

"""Represents an update to a `Page`. Fields that are set will be updated."""
input PagePatch {
  """Routing URL of the page."""
  url: String
}

"""A connection to a list of `Page` values."""
type PagesConnection {
  """A list of `Page` objects."""
  nodes: [Page!]!

  """
  A list of edges which contains the `Page` and cursor to aid in pagination.
  """
  edges: [PagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Page` you could get from the connection."""
  totalCount: Int!
}

"""A `Page` edge in the connection."""
type PagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Page` at the end of the edge."""
  node: Page!
}

"""Methods to use when ordering `Page`."""
enum PagesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  URL_ASC
  URL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `BuildingBlock`."""
  buildingBlocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `BuildingBlock`."""
    orderBy: [BuildingBlocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BuildingBlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BuildingBlockFilter
  ): BuildingBlocksConnection

  """Reads and enables pagination through a set of `Page`."""
  pages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageFilter
  ): PagesConnection

  """Reads and enables pagination through a set of `PageBlock`."""
  pageBlocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `PageBlock`."""
    orderBy: [PageBlocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PageBlockCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: PageBlockFilter
  ): PageBlocksConnection
  buildingBlock(uuid: UUID!): BuildingBlock
  page(id: Int!): Page
  pageByUrl(url: String!): Page
  pageBlock(id: Int!): PageBlock

  """Reads a single `BuildingBlock` using its globally unique `ID`."""
  buildingBlockByNodeId(
    """
    The globally unique `ID` to be used in selecting a single `BuildingBlock`.
    """
    nodeId: ID!
  ): BuildingBlock

  """Reads a single `Page` using its globally unique `ID`."""
  pageByNodeId(
    """The globally unique `ID` to be used in selecting a single `Page`."""
    nodeId: ID!
  ): Page

  """Reads a single `PageBlock` using its globally unique `ID`."""
  pageBlockByNodeId(
    """The globally unique `ID` to be used in selecting a single `PageBlock`."""
    nodeId: ID!
  ): PageBlock
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: String

  """Not equal to the specified value."""
  notEqualTo: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """Included in the specified list."""
  in: [String!]

  """Not included in the specified list."""
  notIn: [String!]

  """Less than the specified value."""
  lessThan: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any
  single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLike: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches
  any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_)
  matches any single character; a percent sign (%) matches any sequence of zero
  or more characters.
  """
  notLikeInsensitive: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String
}

"""All input for the `updateBuildingBlockByNodeId` mutation."""
input UpdateBuildingBlockByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `BuildingBlock` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `BuildingBlock` being updated.
  """
  patch: BuildingBlockPatch!
}

"""All input for the `updateBuildingBlock` mutation."""
input UpdateBuildingBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `BuildingBlock` being updated.
  """
  patch: BuildingBlockPatch!

  """
  A globally unique identifier of the building block. You should generate it
  manually, but if ommited, a value will be generated for you. DO NOT USE
  EXISTING UUID, IT MUST BE UNIQUE.
  """
  uuid: UUID!
}

"""The output of our update `BuildingBlock` mutation."""
type UpdateBuildingBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `BuildingBlock` that was updated by this mutation."""
  buildingBlock: BuildingBlock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `BuildingBlock`. May be used by Relay 1."""
  buildingBlockEdge(
    """The method to use when ordering `BuildingBlock`."""
    orderBy: [BuildingBlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): BuildingBlocksEdge
}

"""All input for the `updatePageBlockByNodeId` mutation."""
input UpdatePageBlockByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `PageBlock` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `PageBlock` being updated.
  """
  patch: PageBlockPatch!
}

"""All input for the `updatePageBlock` mutation."""
input UpdatePageBlockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `PageBlock` being updated.
  """
  patch: PageBlockPatch!
  id: Int!
}

"""The output of our update `PageBlock` mutation."""
type UpdatePageBlockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `PageBlock` that was updated by this mutation."""
  pageBlock: PageBlock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Page` that is related to this `PageBlock`."""
  page: Page

  """Reads a single `BuildingBlock` that is related to this `PageBlock`."""
  buildingBlock: BuildingBlock

  """An edge for our `PageBlock`. May be used by Relay 1."""
  pageBlockEdge(
    """The method to use when ordering `PageBlock`."""
    orderBy: [PageBlocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): PageBlocksEdge
}

"""All input for the `updatePageByNodeId` mutation."""
input UpdatePageByNodeIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Page` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
}

"""All input for the `updatePageByUrl` mutation."""
input UpdatePageByUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!

  """Routing URL of the page."""
  url: String!
}

"""All input for the `updatePage` mutation."""
input UpdatePageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Page` being updated.
  """
  patch: PagePatch!
  id: Int!
}

"""The output of our update `Page` mutation."""
type UpdatePagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Page` that was updated by this mutation."""
  page: Page

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Page`. May be used by Relay 1."""
  pageEdge(
    """The method to use when ordering `Page`."""
    orderBy: [PagesOrderBy!] = [PRIMARY_KEY_ASC]
  ): PagesEdge
}

"""
A universally unique identifier as defined by [RFC 4122](https://tools.ietf.org/html/rfc4122).
"""
scalar UUID

"""
A filter to be used against UUID fields. All fields are combined with a logical ‘and.’
"""
input UUIDFilter {
  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Equal to the specified value."""
  equalTo: UUID

  """Not equal to the specified value."""
  notEqualTo: UUID

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: UUID

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: UUID

  """Included in the specified list."""
  in: [UUID!]

  """Not included in the specified list."""
  notIn: [UUID!]

  """Less than the specified value."""
  lessThan: UUID

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: UUID

  """Greater than the specified value."""
  greaterThan: UUID

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: UUID
}
